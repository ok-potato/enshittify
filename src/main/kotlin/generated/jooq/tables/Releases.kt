/*
 * This file is generated by jOOQ.
 */
package generated.jooq.tables


import generated.jooq.Public
import generated.jooq.indexes.IDX_RELEASE_TITLE
import generated.jooq.keys.RELEASES_PKEY
import generated.jooq.keys.RELEASE_FEATURES__RELEASE_FEATURES_RELEASE_ID_FKEY
import generated.jooq.keys.TRACKS__TRACKS_RELEASE_ID_FKEY
import generated.jooq.tables.Artists.ArtistsPath
import generated.jooq.tables.ReleaseFeatures.ReleaseFeaturesPath
import generated.jooq.tables.Tracks.TracksPath
import generated.jooq.tables.records.ReleasesRecord

import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Releases(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, ReleasesRecord>?,
    parentPath: InverseForeignKey<out Record, ReleasesRecord>?,
    aliased: Table<ReleasesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<ReleasesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.releases</code>
         */
        val RELEASES: Releases = Releases()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ReleasesRecord> = ReleasesRecord::class.java

    /**
     * The column <code>public.releases.id</code>.
     */
    val ID: TableField<ReleasesRecord, UUID?> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.releases.title</code>.
     */
    val TITLE: TableField<ReleasesRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(500), this, "")

    private constructor(alias: Name, aliased: Table<ReleasesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<ReleasesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<ReleasesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.releases</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.releases</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.releases</code> table reference
     */
    constructor(): this(DSL.name("releases"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ReleasesRecord>?, parentPath: InverseForeignKey<out Record, ReleasesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, RELEASES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class ReleasesPath : Releases, Path<ReleasesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, ReleasesRecord>?, parentPath: InverseForeignKey<out Record, ReleasesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<ReleasesRecord>): super(alias, aliased)
        override fun `as`(alias: String): ReleasesPath = ReleasesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): ReleasesPath = ReleasesPath(alias, this)
        override fun `as`(alias: Table<*>): ReleasesPath = ReleasesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_RELEASE_TITLE)
    override fun getPrimaryKey(): UniqueKey<ReleasesRecord> = RELEASES_PKEY

    private lateinit var _releaseFeatures: ReleaseFeaturesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.release_features</code> table
     */
    fun releaseFeatures(): ReleaseFeaturesPath {
        if (!this::_releaseFeatures.isInitialized)
            _releaseFeatures = ReleaseFeaturesPath(this, null, RELEASE_FEATURES__RELEASE_FEATURES_RELEASE_ID_FKEY.inverseKey)

        return _releaseFeatures;
    }

    val releaseFeatures: ReleaseFeaturesPath
        get(): ReleaseFeaturesPath = releaseFeatures()

    private lateinit var _tracks: TracksPath

    /**
     * Get the implicit to-many join path to the <code>public.tracks</code>
     * table
     */
    fun tracks(): TracksPath {
        if (!this::_tracks.isInitialized)
            _tracks = TracksPath(this, null, TRACKS__TRACKS_RELEASE_ID_FKEY.inverseKey)

        return _tracks;
    }

    val tracks: TracksPath
        get(): TracksPath = tracks()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.artists</code> table
     */
    val artists: ArtistsPath
        get(): ArtistsPath = releaseFeatures().artists()
    override fun `as`(alias: String): Releases = Releases(DSL.name(alias), this)
    override fun `as`(alias: Name): Releases = Releases(alias, this)
    override fun `as`(alias: Table<*>): Releases = Releases(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Releases = Releases(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Releases = Releases(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Releases = Releases(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Releases = Releases(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Releases = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Releases = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Releases = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Releases = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Releases = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Releases = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Releases = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Releases = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Releases = where(DSL.notExists(select))
}
